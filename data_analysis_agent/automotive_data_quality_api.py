"""
Automotive Data Quality Report API

This module provides a comprehensive API for querying automotive data quality reports
generated by the automotive_data_quality module. It allows users to load JSON reports
and extract specific column information, correlations, and quality metrics.

The API is designed to work with JSON reports and optionally with the original CSV data
for enhanced analysis capabilities.

Author: Reinaldo Penno
License: MIT
Version: 1.0.0
"""

import json
import logging
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

import pandas as pd

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class AutomotiveDataQualityAPI:
    """
    API for querying automotive data quality reports.
    
    This class provides methods to load and query automotive data quality reports,
    extract column-specific information, analyze correlations, and access quality metrics.
    """
    
    def __init__(self,
                 report_data: Optional[Dict[str, Any]] = None,
                 report_path: Optional[Union[str, Path]] = None,
                 csv_data: Optional[pd.DataFrame] = None,
                 csv_path: Optional[Union[str, Path]] = None):
        """
        Initialize the API with report data and optionally CSV data.
        
        Parameters
        ----------
        report_data : Dict[str, Any], optional
            Pre-loaded report data as a dictionary
        report_path : str or Path, optional
            Path to the JSON report file
        csv_data : pd.DataFrame, optional
            Pre-loaded CSV data
        csv_path : str or Path, optional
            Path to the original CSV file
            
        Examples
        --------
        # Load from file paths
        api = AutomotiveDataQualityAPI(
            report_path='report.json',
            csv_path='data.csv'
        )
        
        # Load from pre-loaded data
        with open('report.json') as f:
            report = json.load(f)
        df = pd.read_csv('data.csv')
        api = AutomotiveDataQualityAPI(report_data=report, csv_data=df)
        """
        self.report_data = None
        self.csv_data = None
        
        # Load report data
        if report_data is not None:
            self.report_data = report_data
        elif report_path is not None:
            self.report_data = self._load_json_report(report_path)
        else:
            raise ValueError("Either report_data or report_path must be provided")
        
        # Load CSV data if provided
        if csv_data is not None:
            self.csv_data = csv_data
        elif csv_path is not None:
            self.csv_data = pd.read_csv(csv_path)
    
    def _load_json_report(self, report_path: Union[str, Path]) -> Dict[str, Any]:
        """Load JSON report from file."""
        try:
            with open(report_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"Error loading JSON report: {e}")
            raise
    
    def get_column_info(self, column_name: str) -> Dict[str, Any]:
        """
        Get comprehensive information about a specific column from the quality report.
        
        This method aggregates all available information about a column from various
        sections of the quality report, including signal quality, correlations,
        range violations, and signal dictionary information.
        
        Parameters
        ----------
        column_name : str
            Name of the column to query
            
        Returns
        -------
        Dict[str, Any]
            Comprehensive information about the column including:
            - Basic statistics (min, max, mean, std, missing values, etc.)
            - Signal dictionary information (expanded name, description, units, domain)
            - Range validation results (violations, expected ranges)
            - Conditional signal analysis
            - Stability analysis (constant values, saturation)
            - Correlation information (columns highly correlated with this one)
            - Cross-signal relationships
            - Quality issues and recommendations specific to this column
            
        Examples
        --------
        >>> api = AutomotiveDataQualityAPI(report_path='report.json')
        >>> info = api.get_column_info('speedAvg')
        >>> print(f"Signal type: {info['signal_info']['expanded']}")
        >>> print(f"Missing percentage: {info['missing_percentage']}")
        >>> print(f"Range violations: {info['range_validation']['soft_violations']}")
        
        Raises
        ------
        KeyError
            If the column is not found in the report
        """
        if column_name not in self.report_data.get('signal_quality', {}):
            raise KeyError(f"Column '{column_name}' not found in the quality report")
        
        # Get base signal quality information
        signal_quality = self.report_data['signal_quality'][column_name].copy()
        
        # Add signal dictionary information
        signal_dict = self.report_data.get('signal_dictionary', {})
        signal_quality['signal_dictionary'] = signal_dict.get(column_name, {})
        
        # Find correlations involving this column
        correlations = self._get_column_correlations(column_name)
        signal_quality['correlations'] = correlations
        
        # Check for cross-signal relationships
        cross_signal = self._get_column_cross_signal_info(column_name)
        signal_quality['cross_signal_relationships'] = cross_signal
        
        # Extract priority issues related to this column
        priority_issues = self._get_column_priority_issues(column_name)
        signal_quality['priority_issues'] = priority_issues
        
        # Extract recommendations related to this column
        recommendations = self._get_column_recommendations(column_name)
        signal_quality['recommendations'] = recommendations
        
        # Add summary assessment
        signal_quality['quality_assessment'] = self._assess_column_quality(column_name, signal_quality)
        
        return signal_quality
    
    def _get_column_correlations(self, column_name: str) -> Dict[str, List[Dict[str, Any]]]:
        """Get all correlations involving the specified column."""
        correlations = {'expected': [], 'unexpected': []}
        
        corr_data = self.report_data.get('correlations', {})
        
        # Check expected correlations
        for corr in corr_data.get('expected_correlations', []):
            if column_name in [corr.get('column1'), corr.get('column2')]:
                correlations['expected'].append(corr)
        
        # Check unexpected correlations
        for corr in corr_data.get('unexpected_correlations', []):
            if column_name in [corr.get('column1'), corr.get('column2')]:
                correlations['unexpected'].append(corr)
        
        return correlations
    
    def _get_column_cross_signal_info(self, column_name: str) -> Dict[str, Any]:
        """Get cross-signal plausibility information for the column."""
        cross_signal = {}
        cross_data = self.report_data.get('cross_signal', {})
        
        # Check wheel vs vehicle speed relationships
        for item in cross_data.get('wheel_vs_vehicle_speed', []):
            if column_name in [item.get('vehicle_speed_col'), item.get('wheel_speed_col')]:
                cross_signal['wheel_speed_analysis'] = item
        
        return cross_signal
    
    def _get_column_priority_issues(self, column_name: str) -> List[str]:
        """Get priority issues related to the specific column."""
        issues = []
        for issue in self.report_data.get('priority_issues', []):
            if f"'{column_name}'" in issue:
                issues.append(issue)
        return issues
    
    def _get_column_recommendations(self, column_name: str) -> List[str]:
        """Get recommendations related to the specific column."""
        recommendations = []
        for rec in self.report_data.get('recommendations', []):
            if f"'{column_name}'" in rec:
                recommendations.append(rec)
        return recommendations
    
    def _assess_column_quality(self, column_name: str, column_info: Dict[str, Any]) -> Dict[str, Any]:
        """Assess overall quality of the column."""
        assessment = {
            'overall_score': 1.0,
            'issues': [],
            'strengths': [],
            'recommendations': []
        }
        
        # Check missing values
        missing_pct = column_info.get('missing_percentage', 0)
        if missing_pct > 50:
            assessment['issues'].append(f"High missing value rate: {missing_pct}%")
            assessment['overall_score'] -= 0.3
        elif missing_pct > 20:
            assessment['issues'].append(f"Moderate missing value rate: {missing_pct}%")
            assessment['overall_score'] -= 0.1
        else:
            assessment['strengths'].append(f"Low missing value rate: {missing_pct}%")
        
        # Check range violations
        range_val = column_info.get('range_validation', {})
        if range_val.get('has_violations'):
            hard_violations = range_val.get('hard_violation_percentage', 0)
            soft_violations = range_val.get('soft_violation_percentage', 0)
            
            if hard_violations > 0:
                assessment['issues'].append(f"Hard range violations: {hard_violations}%")
                assessment['overall_score'] -= 0.4
            elif soft_violations > 20:
                assessment['issues'].append(f"High soft range violations: {soft_violations}%")
                assessment['overall_score'] -= 0.2
        
        # Check if it's a constant signal
        stability = column_info.get('stability', {})
        if stability.get('is_constant'):
            assessment['issues'].append("Signal has constant value")
            assessment['overall_score'] -= 0.3
        
        # Check saturation
        if stability.get('saturation', {}).get('is_saturated'):
            assessment['issues'].append("Signal shows saturation (min/max clipping)")
            assessment['overall_score'] -= 0.2
        
        # Ensure score doesn't go below 0
        assessment['overall_score'] = max(0.0, assessment['overall_score'])
        
        return assessment
    
    def get_signal_dictionary_info(self, column_name: str) -> Dict[str, str]:
        """
        Get signal dictionary information for a specific column.
        
        Parameters
        ----------
        column_name : str
            Name of the column
            
        Returns
        -------
        Dict[str, str]
            Signal dictionary information including expanded name, description, units, and domain
            
        Examples
        --------
        >>> api = AutomotiveDataQualityAPI(report_path='report.json')
        >>> info = api.get_signal_dictionary_info('speedAvg')
        >>> print(f"Expanded name: {info['expanded']}")
        >>> print(f"Domain: {info['domain']}")
        """
        signal_dict = self.report_data.get('signal_dictionary', {})
        return signal_dict.get(column_name, {})
    
    def get_correlations(self, 
                        column_name: Optional[str] = None, 
                        correlation_type: str = 'all',
                        threshold: Optional[float] = None) -> List[Dict[str, Any]]:
        """
        Get correlation information, optionally filtered by column and type.
        
        Parameters
        ----------
        column_name : str, optional
            If provided, only return correlations involving this column
        correlation_type : str, default 'all'
            Type of correlations to return: 'all', 'expected', or 'unexpected'
        threshold : float, optional
            If provided, only return correlations above this threshold (absolute value)
            
        Returns
        -------
        List[Dict[str, Any]]
            List of correlation information dictionaries
            
        Examples
        --------
        >>> api = AutomotiveDataQualityAPI(report_path='report.json')
        >>> # Get all unexpected correlations
        >>> correlations = api.get_correlations(correlation_type='unexpected')
        >>> # Get correlations for a specific column
        >>> speed_corrs = api.get_correlations(column_name='speedAvg')
        """
        all_correlations = []
        corr_data = self.report_data.get('correlations', {})
        
        if correlation_type in ['all', 'expected']:
            all_correlations.extend(corr_data.get('expected_correlations', []))
        
        if correlation_type in ['all', 'unexpected']:
            all_correlations.extend(corr_data.get('unexpected_correlations', []))
        
        # Filter by column if specified
        if column_name is not None:
            all_correlations = [
                corr for corr in all_correlations
                if column_name in [corr.get('column1'), corr.get('column2')]
            ]
        
        # Filter by threshold if specified
        if threshold is not None:
            all_correlations = [
                corr for corr in all_correlations
                if abs(corr.get('correlation', 0)) >= threshold
            ]
        
        return all_correlations
    
    def get_columns_by_signal_type(self, signal_type: str) -> List[str]:
        """
        Get all columns that are identified as a specific signal type.
        
        Parameters
        ----------
        signal_type : str
            The signal type to search for (e.g., 'SPEED', 'RPM', 'TEMPERATURE')
            
        Returns
        -------
        List[str]
            List of column names identified as the specified signal type
            
        Examples
        --------
        >>> api = AutomotiveDataQualityAPI(report_path='report.json')
        >>> speed_columns = api.get_columns_by_signal_type('SPEED')
        >>> print(f"Speed columns: {speed_columns}")
        """
        columns = []
        for col_name, col_info in self.report_data.get('signal_quality', {}).items():
            range_val = col_info.get('range_validation', {})
            if range_val.get('signal_type') == signal_type:
                columns.append(col_name)
        return columns
    
    def get_columns_by_domain(self, domain: str) -> List[str]:
        """
        Get all columns that belong to a specific domain.
        
        Parameters
        ----------
        domain : str
            The domain to search for (e.g., 'Engine', 'Driveline/AWD', 'Chassis/Tires')
            
        Returns
        -------
        List[str]
            List of column names in the specified domain
            
        Examples
        --------
        >>> api = AutomotiveDataQualityAPI(report_path='report.json')
        >>> engine_columns = api.get_columns_by_domain('Engine')
        >>> print(f"Engine domain columns: {engine_columns}")
        """
        columns = []
        signal_dict = self.report_data.get('signal_dictionary', {})
        for col_name, signal_info in signal_dict.items():
            if signal_info.get('domain') == domain:
                columns.append(col_name)
        return columns
    
    def get_problematic_columns(self, 
                               min_missing_pct: float = 20.0,
                               min_violation_pct: float = 5.0,
                               include_constant: bool = True,
                               include_saturated: bool = True) -> Dict[str, List[str]]:
        """
        Get columns with quality issues based on specified criteria.
        
        Parameters
        ----------
        min_missing_pct : float, default 20.0
            Minimum missing value percentage to be considered problematic
        min_violation_pct : float, default 5.0
            Minimum range violation percentage to be considered problematic
        include_constant : bool, default True
            Whether to include constant-value columns
        include_saturated : bool, default True
            Whether to include saturated columns
            
        Returns
        -------
        Dict[str, List[str]]
            Dictionary with issue types as keys and lists of problematic columns
            
        Examples
        --------
        >>> api = AutomotiveDataQualityAPI(report_path='report.json')
        >>> problems = api.get_problematic_columns(min_missing_pct=50.0)
        >>> print(f"High missing values: {problems['high_missing']}")
        >>> print(f"Range violations: {problems['range_violations']}")
        """
        problems = {
            'high_missing': [],
            'range_violations': [],
            'constant_values': [],
            'saturated': []
        }
        
        for col_name, col_info in self.report_data.get('signal_quality', {}).items():
            # Check missing values
            missing_pct = col_info.get('missing_percentage', 0)
            if missing_pct >= min_missing_pct:
                problems['high_missing'].append(col_name)
            
            # Check range violations
            range_val = col_info.get('range_validation', {})
            if range_val.get('has_violations'):
                soft_violations = range_val.get('soft_violation_percentage', 0)
                hard_violations = range_val.get('hard_violation_percentage', 0)
                if max(soft_violations, hard_violations) >= min_violation_pct:
                    problems['range_violations'].append(col_name)
            
            # Check constant values
            if include_constant:
                stability = col_info.get('stability', {})
                if stability.get('is_constant'):
                    problems['constant_values'].append(col_name)
            
            # Check saturation
            if include_saturated:
                stability = col_info.get('stability', {})
                if stability.get('saturation', {}).get('is_saturated'):
                    problems['saturated'].append(col_name)
        
        return problems
    
    def get_basic_stats(self) -> Dict[str, Any]:
        """
        Get basic statistics about the dataset.
        
        Returns
        -------
        Dict[str, Any]
            Basic statistics including shape, memory usage, missing values, etc.
            
        Examples
        --------
        >>> api = AutomotiveDataQualityAPI(report_path='report.json')
        >>> stats = api.get_basic_stats()
        >>> print(f"Dataset shape: {stats['shape']}")
        >>> print(f"Missing percentage: {stats['missing_percentage']}")
        """
        return self.report_data.get('basic_stats', {})
    
    def get_overall_quality_score(self) -> float:
        """
        Get the overall quality score of the dataset.
        
        Returns
        -------
        float
            Overall quality score between 0.0 and 1.0
            
        Examples
        --------
        >>> api = AutomotiveDataQualityAPI(report_path='report.json')
        >>> score = api.get_overall_quality_score()
        >>> print(f"Overall quality score: {score:.2f}")
        """
        return self.report_data.get('overall_score', 0.0)
    
    def get_priority_issues(self) -> List[str]:
        """
        Get list of priority issues identified in the dataset.
        
        Returns
        -------
        List[str]
            List of priority issue descriptions
            
        Examples
        --------
        >>> api = AutomotiveDataQualityAPI(report_path='report.json')
        >>> issues = api.get_priority_issues()
        >>> for issue in issues:
        ...     print(f"⚠️ {issue}")
        """
        return self.report_data.get('priority_issues', [])
    
    def get_recommendations(self) -> List[str]:
        """
        Get list of recommendations for improving data quality.
        
        Returns
        -------
        List[str]
            List of recommendation descriptions
            
        Examples
        --------
        >>> api = AutomotiveDataQualityAPI(report_path='report.json')
        >>> recs = api.get_recommendations()
        >>> for rec in recs:
        ...     print(f"💡 {rec}")
        """
        return self.report_data.get('recommendations', [])
    
    def get_column_summary(self, column_name: str) -> str:
        """
        Get a human-readable summary of a column's quality assessment.
        
        Parameters
        ----------
        column_name : str
            Name of the column to summarize
            
        Returns
        -------
        str
            Human-readable summary of the column's quality
            
        Examples
        --------
        >>> api = AutomotiveDataQualityAPI(report_path='report.json')
        >>> summary = api.get_column_summary('speedAvg')
        >>> print(summary)
        """
        try:
            col_info = self.get_column_info(column_name)
        except KeyError:
            return f"Column '{column_name}' not found in the quality report."
        
        summary_parts = []
        
        # Basic information
        signal_dict = col_info.get('signal_dictionary', {})
        expanded_name = signal_dict.get('expanded', column_name)
        domain = signal_dict.get('domain', 'Unknown')
        
        summary_parts.append(f"Column: {column_name}")
        if expanded_name != column_name:
            summary_parts.append(f"Expanded name: {expanded_name}")
        summary_parts.append(f"Domain: {domain}")
        
        # Data type and basic stats
        data_type = col_info.get('data_type', 'Unknown')
        missing_pct = col_info.get('missing_percentage', 0)
        unique_count = col_info.get('unique_count', 0)
        
        summary_parts.append(f"Data type: {data_type}")
        summary_parts.append(f"Missing values: {missing_pct}%")
        summary_parts.append(f"Unique values: {unique_count}")
        
        # Range validation
        range_val = col_info.get('range_validation', {})
        if range_val.get('signal_type'):
            signal_type = range_val['signal_type']
            summary_parts.append(f"Detected as: {signal_type}")
            
            if range_val.get('has_violations'):
                soft_violations = range_val.get('soft_violation_percentage', 0)
                hard_violations = range_val.get('hard_violation_percentage', 0)
                if hard_violations > 0:
                    summary_parts.append(f"⚠️ Hard range violations: {hard_violations}%")
                if soft_violations > 0:
                    summary_parts.append(f"⚠️ Soft range violations: {soft_violations}%")
        
        # Quality assessment
        quality = col_info.get('quality_assessment', {})
        overall_score = quality.get('overall_score', 1.0)
        summary_parts.append(f"Quality score: {overall_score:.2f}/1.0")
        
        # Issues and recommendations
        issues = quality.get('issues', [])
        if issues:
            summary_parts.append("Issues:")
            for issue in issues:
                summary_parts.append(f"  • {issue}")
        
        return "\n".join(summary_parts)
    
    def list_all_columns(self) -> List[str]:
        """
        Get list of all columns in the quality report.
        
        Returns
        -------
        List[str]
            List of all column names
            
        Examples
        --------
        >>> api = AutomotiveDataQualityAPI(report_path='report.json')
        >>> columns = api.list_all_columns()
        >>> print(f"Total columns: {len(columns)}")
        """
        return list(self.report_data.get('signal_quality', {}).keys())
    
    def search_columns(self, pattern: str, search_in: str = 'name') -> List[str]:
        """
        Search for columns matching a pattern.
        
        Parameters
        ----------
        pattern : str
            Pattern to search for (case-insensitive)
        search_in : str, default 'name'
            Where to search: 'name', 'expanded', 'description', or 'domain'
            
        Returns
        -------
        List[str]
            List of matching column names
            
        Examples
        --------
        >>> api = AutomotiveDataQualityAPI(report_path='report.json')
        >>> speed_cols = api.search_columns('speed')
        >>> battery_cols = api.search_columns('battery', search_in='description')
        """
        pattern_lower = pattern.lower()
        matching_columns = []
        
        signal_dict = self.report_data.get('signal_dictionary', {})
        
        for col_name in self.list_all_columns():
            if search_in == 'name':
                if pattern_lower in col_name.lower():
                    matching_columns.append(col_name)
            else:
                signal_info = signal_dict.get(col_name, {})
                search_value = signal_info.get(search_in, '').lower()
                if pattern_lower in search_value:
                    matching_columns.append(col_name)
        
        return matching_columns


# Convenience functions for quick access
def load_quality_report(report_path: Union[str, Path], 
                       csv_path: Optional[Union[str, Path]] = None) -> AutomotiveDataQualityAPI:
    """
    Convenience function to quickly load a quality report.
    
    Parameters
    ----------
    report_path : str or Path
        Path to the JSON report file
    csv_path : str or Path, optional
        Path to the original CSV file
        
    Returns
    -------
    AutomotiveDataQualityAPI
        Initialized API instance
        
    Examples
    --------
    >>> api = load_quality_report('report.json', 'data.csv')
    >>> info = api.get_column_info('speedAvg')
    """
    return AutomotiveDataQualityAPI(report_path=report_path, csv_path=csv_path)


def get_column_quality_summary(report_path: Union[str, Path], column_name: str) -> str:
    """
    Quick function to get a column quality summary.
    
    Parameters
    ----------
    report_path : str or Path
        Path to the JSON report file
    column_name : str
        Name of the column to analyze
        
    Returns
    -------
    str
        Human-readable quality summary
        
    Examples
    --------
    >>> summary = get_column_quality_summary('report.json', 'speedAvg')
    >>> print(summary)
    """
    api = AutomotiveDataQualityAPI(report_path=report_path)
    return api.get_column_summary(column_name)


if __name__ == "__main__":
    # Example usage
    try:
        # Example with the provided report
        api = AutomotiveDataQualityAPI(report_path='report.json')
        
        print("=== Automotive Data Quality API Demo ===")
        print(f"Overall quality score: {api.get_overall_quality_score():.2f}")
        print(f"Total columns: {len(api.list_all_columns())}")
        
        # Get information about a specific column
        if 'speedAvg' in api.list_all_columns():
            print("\n=== SpeedAvg Column Analysis ===")
            print(api.get_column_summary('speedAvg'))
            
        # Show problematic columns
        problems = api.get_problematic_columns()
        print(f"\n=== Problematic Columns ===")
        for issue_type, columns in problems.items():
            if columns:
                print(f"{issue_type}: {columns}")
        
    except Exception as e:
        logger.error(f"Demo failed: {e}")
        print("To use this API, provide valid report and CSV file paths.")
